// Code generated by MockGen. DO NOT EDIT.
// Source: ./gomock/importable/swimmer.go

package importable

import (
	gomock "github.com/golang/mock/gomock"
)

// MockSwimmer is a mock of Swimmer interface
type MockSwimmer struct {
	ctrl     *gomock.Controller
	recorder *MockSwimmerMockRecorder
}

// MockSwimmerMockRecorder is the mock recorder for MockSwimmer
type MockSwimmerMockRecorder struct {
	mock *MockSwimmer
}

// NewMockSwimmer creates a new mock instance
func NewMockSwimmer(ctrl *gomock.Controller) *MockSwimmer {
	mock := &MockSwimmer{ctrl: ctrl}
	mock.recorder = &MockSwimmerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSwimmer) EXPECT() *MockSwimmerMockRecorder {
	return _m.recorder
}

// Swim mocks base method
func (_m *MockSwimmer) Swim(speed float64) string {
	ret := _m.ctrl.Call(_m, "Swim", speed)
	ret0, _ := ret[0].(string)
	return ret0
}

// Swim indicates an expected call of Swim
func (_mr *MockSwimmerMockRecorder) Swim(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Swim", arg0)
}

// Splash mocks base method
func (_m *MockSwimmer) Splash(times int) int {
	ret := _m.ctrl.Call(_m, "Splash", times)
	ret0, _ := ret[0].(int)
	return ret0
}

// Splash indicates an expected call of Splash
func (_mr *MockSwimmerMockRecorder) Splash(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Splash", arg0)
}

// Say mocks base method
func (_m *MockSwimmer) Say(times int, what string) (string, int) {
	ret := _m.ctrl.Call(_m, "Say", times, what)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// Say indicates an expected call of Say
func (_mr *MockSwimmerMockRecorder) Say(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Say", arg0, arg1)
}
